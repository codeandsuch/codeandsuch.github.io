{"version":3,"sources":["webpack:///path---webpack-aliases-typescript-0824aec9d354a7726465.js","webpack:///./.cache/json/webpack-aliases-typescript.json"],"names":["webpackJsonp","275","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","excerpt","frontmatter","date","path","twitterHandle","fields","twitterAvatarUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,OAAA,oBAAkDC,gBAAmBC,GAAA,kJAAAC,KAAA,2iTAAg1TC,QAAA,oUAAAC,aAAwjBN,MAAA,iDAAAC,OAAA,kBAAAM,KAAA,mBAAAC,KAAA,8BAAAC,cAAA,mBAAqLC,QAAWC,iBAAA,kFAAoGC","file":"path---webpack-aliases-typescript-0824aec9d354a7726465.js","sourcesContent":["webpackJsonp([109763708754463],{\n\n/***/ 275:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"code & such\",\"author\":\"Kalle Bornemark\"}},\"markdownRemark\":{\"id\":\"/Users/laptopic/code/personal/codeandsuch.github.io/src/pages/2018-08-14-webpack-aliases-typescript/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This small tutorial will show you how to set up <a href=\\\"https://webpack.js.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Webpack</a> aliases for your <a href=\\\"https://www.typescriptlang.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Typescript</a> and <a href=\\\"https://jestjs.io/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Jest</a> project.</p>\\n<h2 id=\\\"the-problem\\\"><a href=\\\"#the-problem\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The problem</h2>\\n<p>Importing files with relative paths is fine in small projects, but once the project starts growing it can become a burden. Many of us have found ourselves writing something like this in the past:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../../../../components/Foo'</span></code></pre>\\n      </div>\\n<p>This not only requires one to figure out what the path should be, but is also very likely to break if (when) files get moved around.</p>\\n<h2 id=\\\"webpack-to-the-rescue\\\"><a href=\\\"#webpack-to-the-rescue\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Webpack to the rescue!</h2>\\n<p>To solve this, Webpack provides users with <a href=\\\"https://webpack.js.org/configuration/resolve/#resolve-alias\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">resolve.alias</a> which allows for concise and consistent file imports.</p>\\n<p>Assuming our <code class=\\\"language-text\\\">components</code> folder live inside a root-level <code class=\\\"language-text\\\">src</code> folder, we can create a <code class=\\\"language-text\\\">Components</code> alias like so:</p>\\n<h4 id=\\\"-webpackconfigjs\\\"><a href=\\\"#-webpackconfigjs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ðŸ“„ webpack.config.js</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  resolve<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    alias<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      Components<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'src/components/'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We can now refactor the above import in a way that is much cleaner and that doesnâ€™t depend on the fileâ€™s location relative to <code class=\\\"language-text\\\">Foo</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'Components/Foo'</span></code></pre>\\n      </div>\\n<h2 id=\\\"with-typescript\\\"><a href=\\\"#with-typescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>With Typescript</h2>\\n<p>This is all great, but in order to make this work with Typescript, a final step is required. At the moment, our alias isnâ€™t known by Typescript and will thus produce an error when referenced. To fix this, add the alias to <code class=\\\"language-text\\\">tsconfig.json</code>.</p>\\n<h4 id=\\\"-tsconfigjson\\\"><a href=\\\"#-tsconfigjson\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ðŸ“„ tsconfig.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"compilerOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"paths\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"Components/*\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">\\\"./src/components/*\\\"</span> <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"with-jest\\\"><a href=\\\"#with-jest\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>With Jest</h2>\\n<p>Using aliases for commonly accessed paths creates a good workflow to build your app with, and you probably want to keep using these aliases when writing tests. So far, weâ€™ve added the <code class=\\\"language-text\\\">components</code> alias to <code class=\\\"language-text\\\">webpack.config.js</code> and <code class=\\\"language-text\\\">tsconfig.json</code>, but since the Typescript inside our Jest tests isnâ€™t part of the same transpilation step as the rest of our codebase, the alias also needs to be added to our Jest configuration.</p>\\n<p>Unless specified otherwise, Jest is configured inside <code class=\\\"language-text\\\">package.json</code>. To make Jest aware of our <code class=\\\"language-text\\\">components</code> alias, add it to <code class=\\\"language-text\\\">moduleNameMapper</code>.</p>\\n<h4 id=\\\"-packagejson\\\"><a href=\\\"#-packagejson\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ðŸ“„ package.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  // ...\\n  <span class=\\\"token property\\\">\\\"jest\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"moduleNameMapper\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"^Components/(.*)\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/src/components/$1\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Note: This assumes that youâ€™ve already set up Jest correctly in your React/Typescript project.</p>\\n<p>Thatâ€™s it! ðŸŽ‰ Our Webpack alias should now also work inside Jest tests.</p>\",\"excerpt\":\"This small tutorial will show you how to set up  Webpack  aliases for your  Typescript  and  Jest  project. The problem Importing files with relative paths is fine in small projects, but once the project starts growing it can become a burden. Many of us have found ourselves writing something like this in the past: Thisâ€¦\",\"frontmatter\":{\"title\":\"Using Webpack aliases with Typescript and Jest\",\"author\":\"Kalle Bornemark\",\"date\":\"14th August 2018\",\"path\":\"/webpack-aliases-typescript\",\"twitterHandle\":\"@kallebornemark\"},\"fields\":{\"twitterAvatarUrl\":\"https://pbs.twimg.com/profile_images/1041433650670329858/ovH4bEC5_normal.jpg\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---webpack-aliases-typescript-0824aec9d354a7726465.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"code & such\",\"author\":\"Kalle Bornemark\"}},\"markdownRemark\":{\"id\":\"/Users/laptopic/code/personal/codeandsuch.github.io/src/pages/2018-08-14-webpack-aliases-typescript/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This small tutorial will show you how to set up <a href=\\\"https://webpack.js.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Webpack</a> aliases for your <a href=\\\"https://www.typescriptlang.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Typescript</a> and <a href=\\\"https://jestjs.io/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Jest</a> project.</p>\\n<h2 id=\\\"the-problem\\\"><a href=\\\"#the-problem\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The problem</h2>\\n<p>Importing files with relative paths is fine in small projects, but once the project starts growing it can become a burden. Many of us have found ourselves writing something like this in the past:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../../../../components/Foo'</span></code></pre>\\n      </div>\\n<p>This not only requires one to figure out what the path should be, but is also very likely to break if (when) files get moved around.</p>\\n<h2 id=\\\"webpack-to-the-rescue\\\"><a href=\\\"#webpack-to-the-rescue\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Webpack to the rescue!</h2>\\n<p>To solve this, Webpack provides users with <a href=\\\"https://webpack.js.org/configuration/resolve/#resolve-alias\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">resolve.alias</a> which allows for concise and consistent file imports.</p>\\n<p>Assuming our <code class=\\\"language-text\\\">components</code> folder live inside a root-level <code class=\\\"language-text\\\">src</code> folder, we can create a <code class=\\\"language-text\\\">Components</code> alias like so:</p>\\n<h4 id=\\\"-webpackconfigjs\\\"><a href=\\\"#-webpackconfigjs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ðŸ“„ webpack.config.js</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  resolve<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    alias<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      Components<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'src/components/'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We can now refactor the above import in a way that is much cleaner and that doesnâ€™t depend on the fileâ€™s location relative to <code class=\\\"language-text\\\">Foo</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'Components/Foo'</span></code></pre>\\n      </div>\\n<h2 id=\\\"with-typescript\\\"><a href=\\\"#with-typescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>With Typescript</h2>\\n<p>This is all great, but in order to make this work with Typescript, a final step is required. At the moment, our alias isnâ€™t known by Typescript and will thus produce an error when referenced. To fix this, add the alias to <code class=\\\"language-text\\\">tsconfig.json</code>.</p>\\n<h4 id=\\\"-tsconfigjson\\\"><a href=\\\"#-tsconfigjson\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ðŸ“„ tsconfig.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"compilerOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"paths\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"Components/*\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">\\\"./src/components/*\\\"</span> <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"with-jest\\\"><a href=\\\"#with-jest\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>With Jest</h2>\\n<p>Using aliases for commonly accessed paths creates a good workflow to build your app with, and you probably want to keep using these aliases when writing tests. So far, weâ€™ve added the <code class=\\\"language-text\\\">components</code> alias to <code class=\\\"language-text\\\">webpack.config.js</code> and <code class=\\\"language-text\\\">tsconfig.json</code>, but since the Typescript inside our Jest tests isnâ€™t part of the same transpilation step as the rest of our codebase, the alias also needs to be added to our Jest configuration.</p>\\n<p>Unless specified otherwise, Jest is configured inside <code class=\\\"language-text\\\">package.json</code>. To make Jest aware of our <code class=\\\"language-text\\\">components</code> alias, add it to <code class=\\\"language-text\\\">moduleNameMapper</code>.</p>\\n<h4 id=\\\"-packagejson\\\"><a href=\\\"#-packagejson\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ðŸ“„ package.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  // ...\\n  <span class=\\\"token property\\\">\\\"jest\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"moduleNameMapper\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"^Components/(.*)\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/src/components/$1\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Note: This assumes that youâ€™ve already set up Jest correctly in your React/Typescript project.</p>\\n<p>Thatâ€™s it! ðŸŽ‰ Our Webpack alias should now also work inside Jest tests.</p>\",\"excerpt\":\"This small tutorial will show you how to set up  Webpack  aliases for your  Typescript  and  Jest  project. The problem Importing files with relative paths is fine in small projects, but once the project starts growing it can become a burden. Many of us have found ourselves writing something like this in the past: Thisâ€¦\",\"frontmatter\":{\"title\":\"Using Webpack aliases with Typescript and Jest\",\"author\":\"Kalle Bornemark\",\"date\":\"14th August 2018\",\"path\":\"/webpack-aliases-typescript\",\"twitterHandle\":\"@kallebornemark\"},\"fields\":{\"twitterAvatarUrl\":\"https://pbs.twimg.com/profile_images/1041433650670329858/ovH4bEC5_normal.jpg\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/webpack-aliases-typescript.json\n// module id = 275\n// module chunks = 109763708754463"],"sourceRoot":""}