{"version":3,"sources":["webpack:///path---index-1177768ff775b6cb3181.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","367","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","frontmatter","path","author","date","excerpt","html","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAwBC,mBAAsBC,QAAUC,MAAQC,aAAeC,KAAA,qCAAAC,OAAA,kBAAAC,KAAA,mBAAAP,MAAA,yCAAiJQ,QAAA,+OAAAC,KAAA,80ZAAipbN,MAAQC,aAAeC,KAAA,8BAAAC,OAAA,kBAAAC,KAAA,mBAAAP,MAAA,oDAAqJQ,QAAA,+OAAAC,KAAA,8iMAA0/MC","file":"path---index-1177768ff775b6cb3181.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 367:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Code & Stuff\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"frontmatter\":{\"path\":\"/conditional-array-object-literals\",\"author\":\"Kalle Bornemark\",\"date\":\"31st August 2018\",\"title\":\"Conditional array and object literals\"},\"excerpt\":\"The problem A common way to define an array in Javascript is to use an array literal. However, sometimes it‚Äôs desirable to populate the array conditionally depending on the value of some variable. Perhaps you‚Äôve attempted to accomplish‚Ä¶\",\"html\":\"<h2>The problem</h2>\\n<p>A common way to define an array in Javascript is to use an array literal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>However, sometimes it‚Äôs desirable to populate the array conditionally depending on the value of some variable. Perhaps you‚Äôve attempted to accomplish this with a ternary operator:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  isSunny <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object, null]</span></code></pre>\\n      </div>\\n<p>or with the <code class=\\\"language-text\\\">&amp;&amp;</code> operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  isSunny <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object, false]</span></code></pre>\\n      </div>\\n<p>Both of the above result in either <code class=\\\"language-text\\\">null</code> or <code class=\\\"language-text\\\">false</code> being added to the array if <code class=\\\"language-text\\\">isSunny</code> is false, which is not what we want.</p>\\n<h2>The solution</h2>\\n<p>To solve this, we have two options.</p>\\n<h3>Using filter</h3>\\n<p>One rather clean and readable approach is to conditionally populate the array using the <code class=\\\"language-text\\\">&amp;&amp;</code> operator, and then removing its falsy values by chaining on a <code class=\\\"language-text\\\">filter</code> call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  isSunny <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>Boolean<span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object]</span></code></pre>\\n      </div>\\n<h3>Using the spread operator</h3>\\n<p>Another approach is to leverage the fact that <strong>spreading an empty array inside another array doesn‚Äôt result in anything</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span>isSunny <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object]</span></code></pre>\\n      </div>\\n<h3>What about object literals?</h3>\\n<p>While the above approach can look a bit messy at first, it has the benefit of working with both array and object literals.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span>someCondition <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// someCondition === true  ->  Object {a: 1, b: 2, c: 3}</span>\\n<span class=\\\"token comment\\\">// someCondition === false  ->  Object {a: 1, b: 2}</span></code></pre>\\n      </div>\\n<p>Neat!</p>\"}},{\"node\":{\"frontmatter\":{\"path\":\"/webpack-aliases-typescript\",\"author\":\"Kalle Bornemark\",\"date\":\"14th August 2018\",\"title\":\"Using Webpack aliases with Typescript (and Jest)\"},\"excerpt\":\"This small tutorial will show you how to set up  Webpack  aliases for your  Typescript  and  Jest  project. The problem Importing files using relative paths works well in small projects, but it can become cumbersome rather quickly once‚Ä¶\",\"html\":\"<p>This small tutorial will show you how to set up <a href=\\\"https://webpack.js.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Webpack</a> aliases for your <a href=\\\"https://www.typescriptlang.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Typescript</a> and <a href=\\\"https://jestjs.io/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Jest</a> project.</p>\\n<h2>The problem</h2>\\n<p>Importing files using relative paths works well in small projects, but it can become cumbersome rather quickly once the project starts growing. Many of us have found ourselves writing something like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../../../../components/Foo'</span></code></pre>\\n      </div>\\n<p>This not only requires one to figure out what the path should be, but is also very likely to break if (when) files get moved around.</p>\\n<h2>Webpack to the rescue!</h2>\\n<p>To solve this, Webpack provides users with <a href=\\\"https://webpack.js.org/configuration/resolve/#resolve-alias\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">resolve.alias</a> which allows for concise and consistent file imports. Aliases are added to the <code class=\\\"language-text\\\">alias</code> object nested inside <code class=\\\"language-text\\\">resolve</code>.</p>\\n<p>Assuming our <code class=\\\"language-text\\\">components</code> folder live inside a root-level <code class=\\\"language-text\\\">src</code> folder, we can create a <code class=\\\"language-text\\\">Components</code> alias like so:</p>\\n<h4>üìÑ webpack.config.js</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  resolve<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    alias<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      Components<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'src/components/'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We can now refactor the above import in a way that is much cleaner and that doesn‚Äôt depend on the file‚Äôs location relative to <code class=\\\"language-text\\\">Foo</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'Components/Foo'</span></code></pre>\\n      </div>\\n<h2>With Typescript</h2>\\n<p>This is all great, but in order to make this work Typescript, a final step is required. At the moment, Typescript doesn‚Äôt know about our alias and will thus produce an error when it‚Äôs referenced. To fix this, add the alias to <code class=\\\"language-text\\\">tsconfig.json</code>.</p>\\n<h4>üìÑ tsconfig.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"compilerOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"paths\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"Components/*\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">\\\"./src/components/*\\\"</span> <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>With Jest</h2>\\n<p>Using aliases for commonly accessed paths creates a good workflow to build you app with, and you probably want to keep using these aliases when writing tests. So far, we‚Äôve added the <code class=\\\"language-text\\\">components</code> alias to <code class=\\\"language-text\\\">webpack.config.js</code> and <code class=\\\"language-text\\\">tsconfig.json</code>, but since the Typescript inside our Jest tests isn‚Äôt part of the same transpilation step as the rest of our codebase, the alias also needs to be added to our Jest configuration.</p>\\n<p>Unless configured otherwise, Jest is configured inside <code class=\\\"language-text\\\">package.json</code>. To make Jest aware of our <code class=\\\"language-text\\\">components</code> alias, add it to <code class=\\\"language-text\\\">moduleNameMapper</code>.</p>\\n<h4>üìÑ package.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  // ...\\n  <span class=\\\"token property\\\">\\\"jest\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"moduleNameMapper\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"^Components/(.*)\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/src/components/$1\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Note: This assumes that you‚Äôve already set up Jest correctly in your React/Typescript project.</p>\\n<p>That‚Äôs it! üéâ Our Webpack alias should now also work inside Jest tests.</p>\\n<!-- `youtube:https://www.youtube.com/embed/u21W_tfPVrY` -->\"}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-1177768ff775b6cb3181.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Code & Stuff\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"frontmatter\":{\"path\":\"/conditional-array-object-literals\",\"author\":\"Kalle Bornemark\",\"date\":\"31st August 2018\",\"title\":\"Conditional array and object literals\"},\"excerpt\":\"The problem A common way to define an array in Javascript is to use an array literal. However, sometimes it‚Äôs desirable to populate the array conditionally depending on the value of some variable. Perhaps you‚Äôve attempted to accomplish‚Ä¶\",\"html\":\"<h2>The problem</h2>\\n<p>A common way to define an array in Javascript is to use an array literal.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>However, sometimes it‚Äôs desirable to populate the array conditionally depending on the value of some variable. Perhaps you‚Äôve attempted to accomplish this with a ternary operator:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  isSunny <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object, null]</span></code></pre>\\n      </div>\\n<p>or with the <code class=\\\"language-text\\\">&amp;&amp;</code> operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  isSunny <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object, false]</span></code></pre>\\n      </div>\\n<p>Both of the above result in either <code class=\\\"language-text\\\">null</code> or <code class=\\\"language-text\\\">false</code> being added to the array if <code class=\\\"language-text\\\">isSunny</code> is false, which is not what we want.</p>\\n<h2>The solution</h2>\\n<p>To solve this, we have two options.</p>\\n<h3>Using filter</h3>\\n<p>One rather clean and readable approach is to conditionally populate the array using the <code class=\\\"language-text\\\">&amp;&amp;</code> operator, and then removing its falsy values by chaining on a <code class=\\\"language-text\\\">filter</code> call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  isSunny <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>Boolean<span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object]</span></code></pre>\\n      </div>\\n<h3>Using the spread operator</h3>\\n<p>Another approach is to leverage the fact that <strong>spreading an empty array inside another array doesn‚Äôt result in anything</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> picnicBasket <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"burrito ü•ô\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"strawberry üçì\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bottle of champagne üçæ\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span>isSunny <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sunglasses üï∂\\\"</span><span class=\\\"token punctuation\\\">,</span> quantity<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>picnicBasket<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// isSunny === true  ->  [Object, Object, Object, Object]</span>\\n<span class=\\\"token comment\\\">// isSunny === false  ->  [Object, Object, Object]</span></code></pre>\\n      </div>\\n<h3>What about object literals?</h3>\\n<p>While the above approach can look a bit messy at first, it has the benefit of working with both array and object literals.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span>someCondition <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span> c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// someCondition === true  ->  Object {a: 1, b: 2, c: 3}</span>\\n<span class=\\\"token comment\\\">// someCondition === false  ->  Object {a: 1, b: 2}</span></code></pre>\\n      </div>\\n<p>Neat!</p>\"}},{\"node\":{\"frontmatter\":{\"path\":\"/webpack-aliases-typescript\",\"author\":\"Kalle Bornemark\",\"date\":\"14th August 2018\",\"title\":\"Using Webpack aliases with Typescript (and Jest)\"},\"excerpt\":\"This small tutorial will show you how to set up  Webpack  aliases for your  Typescript  and  Jest  project. The problem Importing files using relative paths works well in small projects, but it can become cumbersome rather quickly once‚Ä¶\",\"html\":\"<p>This small tutorial will show you how to set up <a href=\\\"https://webpack.js.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Webpack</a> aliases for your <a href=\\\"https://www.typescriptlang.org/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Typescript</a> and <a href=\\\"https://jestjs.io/\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">Jest</a> project.</p>\\n<h2>The problem</h2>\\n<p>Importing files using relative paths works well in small projects, but it can become cumbersome rather quickly once the project starts growing. Many of us have found ourselves writing something like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../../../../components/Foo'</span></code></pre>\\n      </div>\\n<p>This not only requires one to figure out what the path should be, but is also very likely to break if (when) files get moved around.</p>\\n<h2>Webpack to the rescue!</h2>\\n<p>To solve this, Webpack provides users with <a href=\\\"https://webpack.js.org/configuration/resolve/#resolve-alias\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">resolve.alias</a> which allows for concise and consistent file imports. Aliases are added to the <code class=\\\"language-text\\\">alias</code> object nested inside <code class=\\\"language-text\\\">resolve</code>.</p>\\n<p>Assuming our <code class=\\\"language-text\\\">components</code> folder live inside a root-level <code class=\\\"language-text\\\">src</code> folder, we can create a <code class=\\\"language-text\\\">Components</code> alias like so:</p>\\n<h4>üìÑ webpack.config.js</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  resolve<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    alias<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      Components<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'src/components/'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We can now refactor the above import in a way that is much cleaner and that doesn‚Äôt depend on the file‚Äôs location relative to <code class=\\\"language-text\\\">Foo</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> Foo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'Components/Foo'</span></code></pre>\\n      </div>\\n<h2>With Typescript</h2>\\n<p>This is all great, but in order to make this work Typescript, a final step is required. At the moment, Typescript doesn‚Äôt know about our alias and will thus produce an error when it‚Äôs referenced. To fix this, add the alias to <code class=\\\"language-text\\\">tsconfig.json</code>.</p>\\n<h4>üìÑ tsconfig.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"compilerOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"paths\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"Components/*\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">\\\"./src/components/*\\\"</span> <span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>With Jest</h2>\\n<p>Using aliases for commonly accessed paths creates a good workflow to build you app with, and you probably want to keep using these aliases when writing tests. So far, we‚Äôve added the <code class=\\\"language-text\\\">components</code> alias to <code class=\\\"language-text\\\">webpack.config.js</code> and <code class=\\\"language-text\\\">tsconfig.json</code>, but since the Typescript inside our Jest tests isn‚Äôt part of the same transpilation step as the rest of our codebase, the alias also needs to be added to our Jest configuration.</p>\\n<p>Unless configured otherwise, Jest is configured inside <code class=\\\"language-text\\\">package.json</code>. To make Jest aware of our <code class=\\\"language-text\\\">components</code> alias, add it to <code class=\\\"language-text\\\">moduleNameMapper</code>.</p>\\n<h4>üìÑ package.json</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  // ...\\n  <span class=\\\"token property\\\">\\\"jest\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    // ...\\n    <span class=\\\"token property\\\">\\\"moduleNameMapper\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"^Components/(.*)\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/src/components/$1\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Note: This assumes that you‚Äôve already set up Jest correctly in your React/Typescript project.</p>\\n<p>That‚Äôs it! üéâ Our Webpack alias should now also work inside Jest tests.</p>\\n<!-- `youtube:https://www.youtube.com/embed/u21W_tfPVrY` -->\"}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 367\n// module chunks = 142629428675168"],"sourceRoot":""}